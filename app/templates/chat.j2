{% extends "base.j2" %}
{% from 'macros/_confirmation.j2' import gen_confirm %}
{% from 'macros/_header.j2' import header %}

{% block script %}
<!-- Alpine Plugins -->
<script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/intersect@3.x.x/dist/cdn.min.js"></script>
<script src="//unpkg.com/alpinejs" defer></script>
<script src="https://unpkg.com/htmx.org"></script>
<script src="https://unpkg.com/htmx.org/dist/ext/json-enc.js"></script>
{% endblock %}

{% block other_head %}
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Lilita+One&family=Madimi+One&family=Protest+Strike&family=Sedan:ital@0;1&family=Tilt+Neon&display=swap" rel="stylesheet">
{% endblock %}

{% block content %}
{{ header(true) }}

<main class="flex justify-around min-h-body">
  <div class="flex flex-col items-center justify-center">
    <h1 class="font-bold mb-8 text-2xl">Hello {{ name }}, ðŸ‘‹</h1>
    {{ gen_confirm(milestones, true) }}
    <a href="/form/reset" class="self-start mt-4">
      <button class="py-2 px-4 rounded-xl text-white font-bold bg-[#34a3e8] hover:bg-[#275d8b] transition-colors duration-200">Redo form</button>
    </a>
  </div>
  <div
    x-data="{
      prompt: '',
      messages: [],
      boundAutoScroll: null,
      autoScroll: true,
      threshold: 5,
      toBottomButton: false,
      handleSubmit() {
        this.messages.push({
          from: 'You',
          message: this.prompt,
          typing: false
        })
      },
      scrollToBottom() {
        console.log('Pressed')
        console.log(this.$refs.scrollContainer.scrollHeight);
        this.$refs.scrollContainer.scrollTop = this.$refs.scrollContainer.scrollHeight - this.$refs.scrollContainer.clientHeight; 
      },
      stopAutoScroll() {
          console.log('scrolled', this.autoScroll, this.$refs.scrollContainer.scrollTop);
          if (this.$refs.scrollContainer.scrollTop < this.$refs.scrollContainer.scrollHeight - this.$refs.scrollContainer.clientHeight - this.threshold)
          {
            this.autoScroll = false;
            this.toBottomButton = true;
          } else {
            this.autoScroll = true;
            this.toBottomButton = false;
          }
      },
      showButton() {
          if (this.$refs.scrollContainer.scrollTop < this.$refs.scrollContainer.scrollHeight - this.$refs.scrollContainer.clientHeight - this.threshold){
            this.toBottomButton = true;
          } else {
            this.toBottomButton = false;
          }
      },
      addAdvisorMessage(message) {
        let messageObject = {
          from: 'Advisor',
          message: message,
          typing: true,
          typedMessage: '',
          typeIndex: 0,
        };
        this.messages.push(messageObject);
        if (!this.boundAutoScroll) {
          this.boundAutoScroll = this.stopAutoScroll.bind(this);
        }
        // add listener on scroll. If user scrolled up past threshold 
        // it stops auto scrolling down and the scroll to bottom button appears.
        this.$refs.scrollContainer.addEventListener('scroll', this.boundAutoScroll);
        this.typeMessage(messageObject);
      },
      typeMessage(messageObject, length) {
        let interval = setInterval(() => {
          // scroll to bottom on each iteration of this unless
          // the user has scrolled up. Reference the x-ref within
          // here for easy access to element instead of using dom
          if (this.autoScroll) {
            this.$refs.scrollContainer.scrollTop = this.$refs.scrollContainer.scrollHeight - this.$refs.scrollContainer.clientHeight; 
          }
          
          let messagesCopy = this.messages.map(message => ({ ...message }));

          const index = messagesCopy.length - 1

          messagesCopy[index].typedMessage += messageObject.message[messageObject.typeIndex++];
          if (messageObject.typeIndex >= messageObject.message.length) {
            this.$refs.scrollContainer.removeEventListener('scroll', this.boundAutoScroll);
            clearInterval(interval);
            messagesCopy[index].typing = false;
          }

          this.messages = messagesCopy
        }, 10);
      },
      init() {

        //this.scrollToBottom.bind(this)();
        document.body.addEventListener('htmx:beforeSend', () => {
          this.prompt = ''
        });

        document.body.addEventListener('htmx:beforeRequest', (evt) => {
          if (evt.detail.pathInfo.requestPath === '/chat/ai-response') {
            if (this.prompt.trim() === '') {
              evt.preventDefault();
            } else {
              this.handleSubmit();
            }
          }
        })

        document.body.addEventListener('htmx:afterRequest', (evt) => {
          if (evt.detail.pathInfo.requestPath === '/chat/ai-response') {
            this.addAdvisorMessage(evt.detail.xhr.response);
          } else {
            this.messages = JSON.parse(evt.detail.xhr.response)
          }
        })
        // function to show scroll down to bottom button if we are not at bottom.
        this.$refs.scrollContainer.addEventListener('scroll', this.showButton.bind(this)) 
      }
    }" 
    class="w-[50vw] rounded shadow-xl p-2" id="chatbot">

  <div x-ref="scrollContainer" id="chat" class="h-[80vh] overflow-y-scroll border-b-2 border-b-[#ddd] mb-6 pb-10 scroll-smooth">
      <div class="fixed bg-[#353839] z-10 w-[80vh]">
        <h1 class="text-center text-4xl font-display">Advisor</h1>
      </div>

      <div class="relative mt-20" hx-post="/chat/get-messages" hx-trigger="load" hx-swap="none">
        <template x-for="value in messages">
          <li :class="value.from === 'You' ? 'mb-2' : 'bg-[#2e3132] mb-6'" class="p-1">
            <span class="font-bold" x-text="value.from + ': '"></span>
            <span x-text="value.typing ? value.typedMessage : value.message"></span>
          </li>
        </template>
      </div>
      <div class="absolute inset-x-0 bottom-[12%] opacity-75 pb-2 left-3/4">
          <button x-show="toBottomButton" @click="scrollToBottom()" class="px-4 py-2 bg-[#34a3e8] hover:bg-[#275d8b] transition-colors duration-200 text-white rounded-full shadow">â†“</button>
      </div>
  </div>

    
    <form class="text-center" hx-post="/chat/ai-response" hx-trigger="submit" hx-swap="none">
      <div class="flex items-center justify-center gap-3"> 
        <input type="text" name="userInput" id="user-input" x-model="prompt" class="w-3/4 h-10 p-5 border-2 border-[#ddd] rounded bg-[#353839] border-[#2b2b2b] focus:outline-none" placeholder="type your message...">
        <button type="submit" class="cursor-pointer bg-[#34a3e8] hover:bg-[#275d8b] text-2xl font-bold py-1 px-3 rounded-lg transition-colors duration-200">ðŸ¡ª</button>
      </div>
    </form>
  </div>
</main>
{% endblock %}
